name: review
run-name: "review #${{ inputs.pr }}${{ inputs.extra-args && format(' ({0})', inputs.extra-args) || '' }}"
permissions: {}
env:
  PR_NUMBER: ${{ inputs.pr }}
on:
  workflow_dispatch:
    inputs:
      pr:
        description: "Pull Request Number"
        required: true
        type: string
      x86_64-linux:
        description: "Run on x86_64-linux"
        required: true
        type: boolean
        default: true
      aarch64-linux:
        description: "Run on aarch64-linux"
        required: true
        type: boolean
        default: true
      x86_64-darwin:
        description: "Run on x86_64-darwin"
        required: true
        type: choice
        default: 'no'
        options:
          - 'no'
          - yes_sandbox_false
          - yes_sandbox_relaxed
          - yes_sandbox_true
      aarch64-darwin:
        description: "Run on aarch64-darwin"
        required: true
        type: choice
        default: yes_sandbox_true
        options:
          - 'no'
          - yes_sandbox_false
          - yes_sandbox_relaxed
          - yes_sandbox_true
      allow-insecure:
        description: 'Allow insecure packages?'
        required: true
        type: boolean
        default: true
      extra-args:
        description: "nixpkgs-review extra args"
        required: false
        type: string
      local-eval:
        description: "Force local eval"
        required: true
        type: boolean
        default: true
      upterm:
        description: "Start upterm session after nixpkgs-review"
        required: true
        type: boolean
        default: false
      post-result:
        description: "Post Result"
        required: true
        type: boolean
        default: true
jobs:
  review:
    strategy:
      fail-fast: false
      matrix:
        system:
          - x86_64-linux
          - aarch64-linux
          - x86_64-darwin
          - aarch64-darwin
        exclude:
          - system: ${{ !inputs.x86_64-linux && 'x86_64-linux' || '' }}
          - system: ${{ !inputs.aarch64-linux && 'aarch64-linux' || '' }}
          - system: ${{ inputs.x86_64-darwin == 'no' && 'x86_64-darwin' || '' }}
          - system: ${{ inputs.aarch64-darwin == 'no' && 'aarch64-darwin' || '' }}
    runs-on: >-
      ${{ (matrix.system == 'x86_64-linux' && 'ubuntu-latest') || (matrix.system == 'aarch64-linux' && 'ubuntu-24.04-arm') || (matrix.system == 'x86_64-darwin' && 'macos-latest') || (matrix.system == 'aarch64-darwin' && 'macos-latest') }}
    outputs:
      report_x86_64-linux: ${{ steps.report.outputs.report_x86_64-linux }}
      report_aarch64-linux: ${{ steps.report.outputs.report_aarch64-linux }}
      report_x86_64-darwin: ${{ steps.report.outputs.report_x86_64-darwin }}
      report_aarch64-darwin: ${{ steps.report.outputs.report_aarch64-darwin }}
      fetch_cmd_x86_64-linux: ${{ steps.report.outputs.fetch_cmd_x86_64-linux }}
      fetch_cmd_aarch64-linux: ${{ steps.report.outputs.fetch_cmd_aarch64-linux }}
      fetch_cmd_x86_64-darwin: ${{ steps.report.outputs.fetch_cmd_x86_64-darwin }}
      fetch_cmd_aarch64-darwin: ${{ steps.report.outputs.fetch_cmd_aarch64-darwin }}
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: .github/actions
      - name: setup nix
        uses: ./.github/actions/setup-nix
        with:
          system: ${{ matrix.system }}
          sandbox: ${{ (matrix.system == 'x86_64-darwin' && inputs.x86_64-darwin == 'yes_sandbox_false' || matrix.system == 'aarch64-darwin' && inputs.aarch64-darwin == 'yes_sandbox_false') && 'false' || (matrix.system == 'x86_64-darwin' && inputs.x86_64-darwin == 'yes_sandbox_relaxed' || matrix.system == 'aarch64-darwin' && inputs.aarch64-darwin == 'yes_sandbox_relaxed') && 'relaxed' || 'true' }}
      - name: install packages
        run: |
          pkgs=(coreutils nixpkgs-review jq gnused)
          args=()
          for pkg in ${pkgs[@]}; do args+=("github:nixos/nixpkgs/nixpkgs-unstable#$pkg"); done
          nix profile install ${args[@]}
      - name: clone nixpkgs
        uses: actions/checkout@v4
        with:
          repository: NixOS/nixpkgs
          path: nixpkgs
          persist-credentials: false
      - name: run nixpkgs-review ${{ inputs.extra-args }}
        run: |
          nixpkgs-review -- \
            pr ${PR_NUMBER} \
            --no-shell \
            --no-headers \
            --print-result \
            --build-args="-L" \
            $EXTRA_ARGS \
            || true
        working-directory: nixpkgs
        env:
          GITHUB_TOKEN: ${{ github.token }}
          EXTRA_ARGS: ${{ inputs.extra-args }}
          NIXPKGS_ALLOW_INSECURE: ${{ inputs.allow-insecure && '1' || '' }}
      - name: start upterm session
        if: ${{ inputs.upterm }}
        uses: owenthereal/action-upterm@v1
        with:
          limit-access-to-actor: true
      - name: output report
        id: report
        run: |
          if [[ -s fetch_cmd ]]; then
            cat fetch_cmd
            echo fetch_cmd_${{ matrix.system }}=$(base64 -w0 fetch_cmd) >> "$GITHUB_OUTPUT"
          fi
          pushd ~/.cache/nixpkgs-review/pr-${PR_NUMBER}
          if [[ "$OS" != "Linux" ]]; then
            sandbox=$(nix config show sandbox)
            sed -i '/^###/s/$/ (sandbox = '"$sandbox"')/' "report.md"
          fi
          if ! [[ -s "report.md" ]]; then
            echo -e "\n---" >> "report.md"
            echo "### \`${{ matrix.system }}\`" >> "report.md"
            echo ":white_check_mark: *No rebuilds*" >> "report.md"
          fi
          cat report.md
          report=$(jq -c '.+{$md}' report.json --rawfile md report.md | base64 -w0)
          popd
          echo report_${{ matrix.system }}=$report >> "$GITHUB_OUTPUT"
        env:
          OS: ${{ runner.os }}
  report:
    runs-on: ubuntu-24.04-arm
    needs: [review]
    outputs:
      report: ${{ steps.report.outputs.report }}
      success: ${{ steps.report.outputs.success }}
    steps:
      - name: generate report
        id: report
        run: |
          echo -e "## \`nixpkgs-review\` result\n" >> report.md
          echo -e "Generated using [\`nixpkgs-review-gha\`](https://github.com/Defelo/nixpkgs-review-gha)\n" >> report.md
          echo -e "Command: \`nixpkgs-review pr ${PR_NUMBER}${EXTRA_ARGS:+ $EXTRA_ARGS}\`\n" >> report.md
          echo -e "Logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\n" >> report.md

          mkdir .tmp
          cd .tmp
          echo ${FETCH_CMD_X86_64_LINUX} | base64 -d > x86_64-linux
          echo ${FETCH_CMD_AARCH64_LINUX} | base64 -d > aarch64-linux
          echo ${FETCH_CMD_X86_64_DARWIN} | base64 -d > x86_64-darwin
          echo ${FETCH_CMD_AARCH64_DARWIN} | base64 -d > aarch64-darwin
          for system in x86_64-linux aarch64-linux x86_64-darwin aarch64-darwin; do
            [[ -s $system ]] || continue
            echo -e "<li><details><summary><code>$system</code></summary>\n\n\`\`\`shell" >> ../cache.md
            cat $system >> ../cache.md
            echo -e "\n\`\`\`\n</details></li>" >> ../cache.md
          done
          cd ..
          if [[ -s cache.md ]]; then
            echo -e "<details><summary>Download packages from cache:</summary><ul>" >> report.md
            cat cache.md >> report.md
            echo -e "</ul></details>\n" >> report.md
          fi

          mkdir reports
          echo ${REPORT_X86_64_LINUX} | base64 -d > reports/x86_64-linux.json
          echo ${REPORT_AARCH64_LINUX} | base64 -d > reports/aarch64-linux.json
          echo ${REPORT_X86_64_DARWIN} | base64 -d > reports/x86_64-darwin.json
          echo ${REPORT_AARCH64_DARWIN} | base64 -d > reports/aarch64-darwin.json
          for system in x86_64-linux aarch64-linux x86_64-darwin aarch64-darwin; do
            if [[ -s reports/$system.json ]]; then
              jq -r '.md' reports/$system.json >> report.md
            fi
          done

          cat report.md
          echo report=$(base64 -w0 report.md) >> "$GITHUB_OUTPUT"
          echo success=$(jq -s 'all(.[].result[]; .failed==[])' reports/*.json) >> "$GITHUB_OUTPUT"
          sed '1s|$| for [#'"$PR_NUMBER"'](https://github.com/NixOS/nixpkgs/pull/'"$PR_NUMBER"')|' report.md >> $GITHUB_STEP_SUMMARY
        env:
          EXTRA_ARGS: ${{ inputs.extra-args }}
          FETCH_CMD_X86_64_LINUX: ${{ needs.review.outputs.fetch_cmd_x86_64-linux }}
          FETCH_CMD_AARCH64_LINUX: ${{ needs.review.outputs.fetch_cmd_aarch64-linux }}
          FETCH_CMD_X86_64_DARWIN: ${{ needs.review.outputs.fetch_cmd_x86_64-darwin }}
          FETCH_CMD_AARCH64_DARWIN: ${{ needs.review.outputs.fetch_cmd_aarch64-darwin }}
          REPORT_X86_64_LINUX: ${{ needs.review.outputs.report_x86_64-linux }}
          REPORT_AARCH64_LINUX: ${{ needs.review.outputs.report_aarch64-linux }}
          REPORT_X86_64_DARWIN: ${{ needs.review.outputs.report_x86_64-darwin }}
          REPORT_AARCH64_DARWIN: ${{ needs.review.outputs.report_aarch64-darwin }}
  post-result:
    runs-on: ubuntu-24.04-arm
    needs: [report]
    if: ${{ inputs.post-result }}
    steps:
      - name: fetch report
        run: echo ${REPORT} | base64 -d > report.md
        env:
          REPORT: ${{ needs.report.outputs.report }}
      - name: post comment
        if: ${{ inputs.post-result }}
        run: |
          if [[ -n "$GH_TOKEN" ]]; then
            gh pr -R NixOS/nixpkgs comment ${PR_NUMBER} -F report.md
          fi
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
